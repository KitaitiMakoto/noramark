%% name = ArtiMark::Parser

- = ( ' '  | '\v' | '\t' )*
nl = ( /\r?\n/ )
nls = nl+
lh = /^/
le = nl | /$/
word  = < /[\w0-9]/ ( '-' | /[\w0-9]/ )* >  { text }
num = < [0-9]+ > { text.to_i }

#common syntax
classname = '.' word:classname { classname }
classnames = (classname)*:classnames { classnames }
idname = '#' word:idname { idname }
idnames = (idname)*:idnames { idnames }

commandname = word:name idnames?:idnames classnames?:classes  { {:name => name, :ids => idnames, :classes => classes} }
parameter = < ( /[^,)]/* | '"' /[^"]/* '"' | "'" /[^']/* "'" ) > { text }
parameters = < parameter (',' parameter)* > { text }
command = commandname:commandname ('(' - parameters:arg - ')')? { arg ||= ''; commandname.merge({ :args => arg.split(',') }) }

# paragraph
paragraph = < (!paragraph_delimiter documentline):paragraph > { create_item(:paragraph, nil, paragraph, raw: text) }

# paragraph_group
paragraph_group = <(paragraph nl | paragraph)+:paragraphs nl* > { create_item(:paragraph_group, nil, paragraphs, raw: text) }

# explicit block 
blockhead = lh - command:command - '{' - le { command }
blockend = lh - '}' - le
blockbody = (!blockend block)+:body { body } 
explicit_block = < blockhead:head blockbody:body blockend > { create_item(:block, head, body, raw: text) }

# inline command
inline = < '[' command:command '{' documentcontent_except('}'):content '}' ']' > { create_item(:inline, command, content, raw: text) } 

# special line commands

# newpage
newpage = line_command:item &{ item[:name] == 'newpage' }

# unordered list
unordered_list = < unordered_item+:items > { create_item(:ul, nil, items, raw: text) }
unordered_item = lh '*:' documentcontent:content le { content }

# ordered list
ordered_list = < ordered_item+:items > { create_item(:ol, nil, items, raw: text) }
ordered_item = lh num ':' documentcontent:content le { content }

items_list = unordered_list | ordered_list

# generic line command
line_command = < lh - command:command ':' documentcontent?:content le > { create_item(:line_command, command, content, raw: text) }

# blocks

block = line_command  | explicit_block | items_list | paragraph_group
block_delimiter = blockhead | blockend | newpage
paragraph_delimiter = block | block_delimiter 

# texts
char = < /[[:print:]]/ > { text }
charstring = < char* > { text }
char_except(e) = char:c &{ c != e }
charstring_except(e) = < char_except(e)* > { text }
documentcontent_except(e) = (inline | !inline char_except(e))+:content ~parse_text(content)

documentcontent = (inline | !inline char)+:content  ~parse_text(content)

documentline = lh documentcontent:content /$/ { content }

root = block*:blocks { blocks }

